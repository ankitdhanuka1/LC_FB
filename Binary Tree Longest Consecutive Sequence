Given a binary tree, find the length of the longest consecutive sequence path.

The path refers to any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The longest consecutive path need to be from parent to child (cannot be the reverse).

Example
Example 1:

Input:
   1
    \
     3
    / \
   2   4
        \
         5
Output:3
Explanation:
Longest consecutive sequence path is 3-4-5, so return 3.

T:o(N), S: o(N)


    int maxsum = 0;
    int longestConsecutive(TreeNode * root) {
        // write your code here
        //return solve(root, 0,0,0);
        if (!root) {
            return 0;
        }

        // q to store node and sum till that node
        queue<pair<TreeNode *, int>> q;
        q.push({root, 1});

        while (!q.empty()) {
            pair<TreeNode *, int> temp = q.front();
            q.pop();
            int sum = temp.second;
            TreeNode *node = temp.first;
            maxsum = max(sum, maxsum);
            
            //if left child is consecutive sequence, add 1 to sum, else, reset sum to 1.
            if (node->left) {
                if ((node->left->val - node->val) == 1) {
                    q.push({node->left, sum + 1});
                } else {
                    q.push({node->left, 1});
                }
            }

            //if right child is consecutive sequence, add 1 to sum, else, reset sum to 1.
            if (node->right) {
                if ((node->right->val - node->val) == 1) {
                    q.push({node->right, sum + 1});
                } else {
                    q.push({node->right, 1});
                }
            }

        }

        return maxsum;
    }
