Given an array of integers, return an array of 2 integers representing the largest range of elements in that array.
A range of integers is defined as set of integers that come one after another in set of real numbers.
Numbers don't need to be adjacent or sorted order in order to form the range.

Example:
array = {1,3,0,11,7,5,2,4,6,9,10}
output = {0,7} // numbers from 0 to 7 are present in array.

T: o(N), S: o(1)

vector<int> largestRange(vector<int> array) {
  // Write your code here.
	unordered_map<int, bool> map;
	int maxcnt = INT_MIN;
	int j,k;
	vector<int> result;
	
	for (int i = 0; i < array.size(); i++) {
		map[array[i]] = true;
	}
	
	for (int i = 0; i< array.size(); i++) {
    // For each element check the range of elements.
		if (map[array[i]] == true) {
			map[array[i]] = false;
			j = array[i] + 1;
			k = array[i] - 1;
			int cnt = 1;
			while ((map.find(j) != map.end()) && (map[j] == true)) {
				cnt++;
				map[j] = false;
				j++;
			}
			while ((map.find(k) != map.end()) && (map[k] == true)) {
				cnt++;
				map[k] = false;
				k--;
			}
			
			
			
			if (cnt > maxcnt) {
				maxcnt =  cnt;
				result = {k+1, j - 1};
			}
		}
	}
  return result;
}
