There are a total of n courses you have to take, labeled from 0 to n - 1.

Before taking some courses, you need to take other courses. For example, to learn course 0, you need to learn course 1 first, which is expressed as [0,1].

Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?

Example
Example 1:

Input: n = 2, prerequisites = [[1,0]] 
Output: true

Time Complexity: O(V + E) where V represents the number of vertices and E represents the number of edges. We pop each node exactly once from the zero in-degree queue and that gives us V. Also, for each vertex, we iterate over its adjacency list and in totality, we iterate over all the edges in the graph which gives us E. Hence, O(V + E).

Space Complexity: O(V + E). We use an intermediate queue data structure to keep all the nodes with 0 in-degree. In the worst case, there won't be any prerequisite relationship and the queue will contain all the vertices initially since all of them will have 0 in-degree. That gives us O(V). Additionally, we also use the adjacency list to represent our graph initially. The space occupied is defined by the number of edges because for each node as the key, we have all its adjacent nodes in the form of a list as the value. Hence, O(E). So, the overall space complexity is O(V + E).

bool canFinish(int numCourses, vector<pair<int, int>> &pre) {
        
        unordered_map<int, vector<int>> map;
        vector<int> indegree(numCourses, 0);
        vector<int> res;
        queue<int> q;

        // Create adjecancy list using map and increment indegree of each dest course. 
        for (int i = 0; i < pre.size(); i++) {
            int dest = pre[i].first;
            int src = pre[i].second;
            map[src].push_back(dest);
            indegree[dest]++;
        }

        // insert all courses with indegree 0 in a queue.
        for (int i = 0; i < indegree.size(); i++) {
            if (indegree[i] == 0) {
                q.push(i);
            }
        }

        //Push all courses with indegree 0 in res vector and decrement the indegree of all cources for which 0 indegree course was the source.
        while (q.size() != 0) {
            int src = q.front();
            res.push_back(src);
            q.pop();
            if (map.find(src) != map.end()) {
                vector<int> temp = map[src];
                for (int i = 0; i < temp.size(); i++) {
                    indegree[temp[i]]--;
                    if (indegree[temp[i]] == 0) {
                        q.push(temp[i]);
                    }
                }
            }
        }

        // if res vector size is equal to numCourses, all courses are completed, return true, else return false.
        if (res.size() == numCourses) {
            return true;
        }

        return false;
    }
