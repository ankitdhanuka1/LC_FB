Given an array of integers nums and an integer k, return the total number of continuous subarrays whose sum equals to k.

 

Example 1:

Input: nums = [1,1,1], k = 2
Output: 2

T: o(n), S:o(n)

int subarraySumEqualsK(vector<int> &nums, int k) {
        // write your code here
        unordered_map<int, int> map;
        int sum = 0;
        int cnt = 0;
        map[0] = 1;
        
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
            if (map.find(sum - k) != map.end()) {
                cnt += map[sum - k];
            }

            map[sum]++;
        }

        return cnt;
}
