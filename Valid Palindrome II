Given a non-empty string s, you may delete at most one character. Judge whether you can make it a palindrome.

Example
Example 1:

Input: s = "aba"
Output: true
Explanation: Originally a palindrome.
Example 2:

Input: s = "abca"
Output: true
Explanation: Delete 'b' or 'c'.

T:o(N), S: o(1)

 bool validPalindrome(string &s) {
        // Write your code here
        int low = 0;
        int high = s.size() - 1;

        while (low <= high) {
            // check char at both ends.
            if (s[low] == s[high]) {
                low++;
                high--;
            } else {
                // if char doesn't match, then try comparing by removing 1 char from either side
                return isPalindrome(s, low + 1, high) || isPalindrome(s, low, high -1);
            }
        }

        return true;
    }

    bool isPalindrome(string &s, int low, int high) {
        while (low <= high) {
            if (s[low] == s[high]) {
                low++;
                high--;
            } else {
                return false;
            }
        }

        return true;
    }
