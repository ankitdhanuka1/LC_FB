Given the root node of a binary search tree, return the sum of values of all nodes with value between L and R (inclusive).

The binary search tree is guaranteed to have unique values.

Example
Example 1:

Input: root = [10,5,15,3,7,null,18], L = 7, R = 15
Output: 32
Example 2:

Input: root = [10,5,15,3,7,13,18,1,null,6], L = 6, R = 10
Output: 23

T: o(N), S: o(N)

  int sum = 0;
public:
    /**
     * @param root: the root node
     * @param L: an integer
     * @param R: an integer
     * @return: the sum
     */
    int rangeSumBST(TreeNode * root, int L, int R) {
        // write your code here.
        solve(root, L, R);
        return sum;
        
    }

    void solve(TreeNode *root, int L, int R) {
        if (!root) {
            return;
        }

        //Inorder tranversal of BST
        solve(root->left, L, R);
        
        //If root->value lies between L & R, add it to sum.
        if ((root->val >= L) && (root->val <= R)) {
            sum += root->val;
        }
        
        solve(root->right, L, R);
    }
