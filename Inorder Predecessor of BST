Given a binary search tree and a node in it, find the in-order predecessor of that node in the BST.

Example
Example1

Input: root = {2,1,3}, p = 1
Output: null
Example2

Input: root = {2,1}, p = 2
Output: 1

T: o(N), S: o(N)

    TreeNode * inorderPredecessor(TreeNode * root, TreeNode * p) {
        // write your code here
        if (root == NULL) {
            return NULL;
        }

        //if root->val is >= p->val, search for p in left subtree of root
        if (root->val >= p->val) {
            inorderPredecessor(root->left, p);
        } else {
            //if right node exist it will be the predecessor
            TreeNode *right = inorderPredecessor(root->right, p);
            if (right) {
                return right;
            }

            //else root will be predecessor.
            return root;
        }

    }
