Given a string s of '(' , ')' and lowercase English characters. 

Your task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses string is valid and return any valid string.

Formally, a parentheses string is valid if and only if:

It is the empty string, contains only lowercase characters, or
It can be written as AB (A concatenated with B), where A and B are valid strings, or
It can be written as (A), where A is a valid string.

Example 1:

Input: s = "lee(t(c)o)de)"
Output: "lee(t(c)o)de"
Explanation: "lee(t(co)de)" , "lee(t(c)ode)" would also be accepted.

T:o(N), S:o(1)

 string minRemoveToMakeValid(string s) {
        int count = 0;
     
        for (int i = 0; i < s.size(); i++) {
            if (s[i] == '(') {
                count++;
            } else if (s[i] == ')') {
                if (count == 0) {  // ')' count becomes more than '(', so remove this parenthesis
                    s.erase(s.begin() + i);
                    i--;
                } else {
                    count--;
                }
            }
        }
        
        count = 0;
        for (int i = s.size() - 1; i >= 0; i--) {
            if (s[i] == ')') {
                count++;
            } else if (s[i] == '(') {
                if (count == 0) {   // '(' count becomes more than ')' , so remove this parenthesis
                    
                    s.erase(s.begin() + i);
            
                } else {
                    count--;
                }
            }
        }
      
        return s;
