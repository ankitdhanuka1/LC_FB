Given an array of n integers where n > 1, nums, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].

Example
Example1

Input: [1,2,3,4]
Output: [24,12,8,6]
Explanation:
2*3*4=24
1*3*4=12
1*2*4=8
1*2*3=6

t:o(N), s: o(n)

vector<int> productExceptSelf(vector<int> &nums) {
        // write your code here
        vector<int> arr1(nums.size(), 0);
        vector<int> arr2(nums.size(), 0);
        vector<int> res(nums.size(), 0);
        int prod = 1;

        for (int i = 0; i < nums.size(); i++) {
            prod *= nums[i];
            arr1[i] = prod;
        }

        prod = 1;
        for (int i = nums.size() - 1; i >= 0; i--) {
            prod *= nums[i];
            arr2[i] = prod;
        }

        res[0] = arr2[1];  // arr1[0-1] * arr2[0+1], since -1 index cannot be there ,s o just taking arr2[1]
        for (int i = 1; i < nums.size() - 1; i++) {
            res[i] = arr1[i-1]*arr2[i+1];
        }
        res[nums.size() - 1] = arr1[nums.size() - 2];  // arr1[nums.size()-1 -1]* arr2[nums.size() - 1+1], since nums.size() cannot be the index, so taking only arr1[nums.size() - 2]

        return res;
    }
