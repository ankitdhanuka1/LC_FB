Given the root of a binary tree, find the maximum value V for which there exist different nodes A and B where V = |A.val - B.val| and A is an ancestor of B.

A node A is an ancestor of B if either: any child of A is equal to B, or any child of A is an ancestor of B.


T: o(N), S: o(N)

int maxAncestorDiff(TreeNode* root) {
        if (root == NULL) {
            return 0;
        }
        
        return solve(root, root->val, root->val);
    }
    
    // record the maximum and minimum values of all root-to-leaf paths and return the maximum difference 
    int solve(TreeNode *root, int curMax, int curMin) {
        if (root == NULL) {
            return curMax - curMin;
        }
        
        curMax = max(root->val, curMax);
        curMin = min(root->val, curMin);
        
        int left = solve(root->left, curMax, curMin);
        int right = solve(root->right, curMax, curMin);
        
        return max(left, right);
    }
};
