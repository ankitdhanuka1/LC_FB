Given two integer arrays of equal length target and arr.

In one step, you can select any non-empty sub-array of arr and reverse it. You are allowed to make any number of steps.

Return True if you can make arr equal to target, or False otherwise.

T:o(N), S: o(N)

bool canBeEqual(vector<int>& target, vector<int>& arr) {
        if (target.size() != arr.size()) {
            return false;
        }
        
        unordered_map<int, int> map;
        
        for (int i = 0; i < target.size(); i++) {
            map[target[i]]++;
            map[arr[i]]--;
        }
        
        for (int i = 0; i < target.size(); i++) {
            if (map[target[i]] != 0) {
                return false;
            }
        }
        
        return true;
    }
