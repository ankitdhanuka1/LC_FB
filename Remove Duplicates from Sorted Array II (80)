Given a sorted array nums, remove the duplicates in-place such that duplicates appeared at most twice and return the new length.
Do not allocate extra space for another array; you must do this by modifying the input array in-place with O(1) extra memory.

Input: nums = [1,1,1,2,2,3]
Output: 5, nums = [1,1,2,2,3]
Explanation: Your function should return length = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively. 
It doesn't matter what you leave beyond the returned length.
T: o(N) , S: o(1)

int removeDup(vector <int> &arr) {
    int left = 2;
    int right = 2;
    
    if (arr.size() <= 2) {
        return arr.size();
    }
    
    while (right < arr.size()) {
        /* if element is not repeated twice add it to left position */
        if (arr[right] != arr[left - 2]) {
            arr[left] = arr[right];
            left++;
        }
        
        /* if element is repeating more than 2 times, just increase the right pointer till we reach non repeating element */
        right++;
    }
    
    return left;
}
