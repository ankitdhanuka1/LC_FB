Given an array of integers, find two non-overlapping subarrays which have the largest sum.
The number in each subarray should be contiguous.
Return the largest sum.

Input:

nums = [1, 3, -1, 2, -1, 2]
Output:

7
Explanation:

the two subarrays are [1, 3] and [2, -1, 2] or [1, 3, -1, 2] and [2].

T: o(N), S: o(N)

int maxTwoSubArrays(vector<int> &nums) {
        // write your code here
        vector<int> left(nums.size(), 0);
        vector<int> right(nums.size(), 0);

        int leftsum = nums[0];
        int leftmax = nums[0];
        left[0] = leftmax;
        
        // find max subarray sum for each index from left to right and store it vector left
        for (int i = 1; i < nums.size(); i++) {
            leftsum = max(leftsum + nums[i], nums[i]);
            leftmax = max(leftsum, leftmax);
            left[i] = leftmax;
        }

        // find max subarray sum for each index from right to left and store it in vector right
        int rightsum = nums[nums.size() - 1];
        int rightmax = nums[nums.size() - 1];
        right[nums.size() - 1] = rightmax;
        for (int i = nums.size() - 2; i >= 0; i--) {
            rightsum = max(rightsum + nums[i], nums[i]);
            rightmax = max(rightsum, rightmax);
            right[i] = rightmax;
        }

        // now find max sum by taking sum for left[i] and right[i+1], so that we can find non overlapping arrays sum.
        int maxsum = INT_MIN;
        for (int i = 0; i < nums.size() - 1; i++) {
            maxsum = max(maxsum, left[i] + right[i+1]);
        }

        return maxsum;
    }
