Given a sequence of n integers arr, determine the lexicographically smallest sequence which may be obtained from it after performing at most k element swaps, each involving a pair of consecutive elements in the sequence.
Note: A list x is lexicographically smaller than a different equal-length list y if and only if, for the earliest index at which the two lists differ, x's element at that index is smaller than y's element at that index.

Example 1
n = 3
k = 2
arr = [5, 3, 1]
output = [1, 5, 3]
We can swap the 2nd and 3rd elements, followed by the 1st and 2nd elements, to end up with the sequence [1, 5, 3]. This is the lexicographically smallest sequence achievable after at most 2 swaps.
Example 2
n = 5
k = 3
arr = [8, 9, 11, 2, 1]
output = [2, 8, 9, 11, 1]
We can swap [11, 2], followed by [9, 2], then [8, 2].


# e.g. [8,9,1,11,3,1] k=3, we search [8,9,1,11] first, find min_val=1, move it to the head (needs 2 swaps), 
# so array becomes [1,8,9,11,3,1]
# now we have k-2= 1 swaps left
# then next we search within [8,9], min_val is 8, so we need to swap 0 times
# then we search [9, 11], min_val is 9, swap 0 times
# then search [11,3], min_val is 3, swap 1 times, array becomes [1,8,9,3,11,1], no swaps left, stop

int find_minindex(vector<int> &arr, int start, int k) {
  int minindex = -1;
  int minnum = INT_MAX;
  for (int i = start; i <= start + k; i++) {
    if (arr[i] < minnum) {
      minnum = arr[i];
      minindex = i;
    }
  }
  
  return minindex;
}

void swap(vector<int> &arr, int start, int end) {
  while (end > start) {
    int temp = arr[end];
    arr[end] = arr[end - 1];
    arr[end - 1] = temp;
    end--;
  } 
}

vector <int> findMinArray(vector <int> arr, int k) {
  // Write your code here
  for (int i = 0; i < arr.size(), k > 0; i++) {
    int minindex = find_minindex(arr, i, k);
    if (minindex == i) {
      continue;
    }
    
    swap(arr, i, minindex);
    
    k-= (minindex - i);
    
  }
  
  return arr; 
  
}
