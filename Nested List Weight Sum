Given a nested list of integers, return the sum of all integers in the list weighted by their depth. Each element is either an integer, or a list -- whose elements may also be integers or other lists.

Example
Example 1:

Input: the list [[1,1],2,[1,1]], 
Output: 10. 
Explanation:
four 1's at depth 2, one 2 at depth 1, 4 * 1 * 2 + 1 * 2 * 1 = 10

T: o(N), N is number of elemnets in all lists, S: o(N)

    int sum = 0;
    void solve(const vector<NestedInteger>& nestedList, int depth) {
        if (nestedList.size() == 0) {
            return;
        }

        // Traverse vector, and check if it integer or vector.
        // if it is integer, calculate sum as int val * depth.
        //if it is vector, then call DFS for child vector, and depth + 1
        
        for (int i = 0; i < nestedList.size(); i++) {
            if(nestedList[i].isInteger()) {
                sum += nestedList[i].getInteger() * depth;
            } else {
                solve(nestedList[i].getList(), depth + 1);
            }
        } 
    }
public:
    int depthSum(const vector<NestedInteger>& nestedList) {
        // Write your code here
        if (nestedList.size() == 0) {
            return 0;
        }

        solve(nestedList, 1);
        return sum;
    }
