Suppose a sorted array is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

Example 1:

Input:

array = [4, 5, 1, 2, 3]
target = 1
Output:

2

int search(vector<int>& nums, int target) {
        
        if (nums.size() == 0) {
            return -1;
        }
        
        int low = 0;
        int high = nums.size() - 1;
        int mid;
        
        while (low <= high)  {
            //cout << low <<" " <<high<<endl;
            mid = low + (high - low)/2;
            //cout << mid <<endl;
            if (nums[mid] == target) {
                return mid;
            }
            
            if (nums[low] <= nums[mid]) { /* left half is sorted */
                if ((nums[low] <= target) && (target <= nums[mid])) { /* search if target is on left side */
                    high = mid - 1;
                } else { /* target not on left side, so search on right side */
                    low = mid + 1;
                }
            } else {  /* right half is sorted */
                if ((nums[mid] <= target ) && (target <= nums[high])) { /* search if target is on right side */
                    low = mid + 1;
                } else { /* target not on right side, so search on left side */
                    high = mid - 1;
                }
            }
            
            
        }
        
        return -1;
    }
