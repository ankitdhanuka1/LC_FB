Given a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom

Example
Example 1

Input: {1,2,3,#,5,#,4}
Output: [1,3,4]
Explanation:
   1            
 /   \
2     3         
 \     \
  5     4       
  
  
T: o(N), S:o(N)

 vector<int> rightSideView(TreeNode* root) {
        queue<TreeNode *> q;
        vector<int> res;
        
        if (!root) {
            return res;
        }

        q.push(root);
        
        while(!q.empty()) {
            int size = q.size();
            //store the rightmost value of each level in right variable.
            int right = INT_MIN;
            
            //level order traversal
            for (int i = 0; i < size; i++) {
                TreeNode *temp = q.front();
                right = temp->val;

                if (temp->left) {
                    q.push(temp->left);
                }

                if (temp->right) {
                    q.push(temp->right);
                }

                q.pop();
            }

            res.push_back(right);
        }

        return res;
    }    
