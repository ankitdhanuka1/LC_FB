Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.

Note: You must not use any built-in BigInteger library or convert the inputs to integer directly.

 

Example 1:

Input: num1 = "2", num2 = "3"
Output: "6"

Constraints:

1 <= num1.length, num2.length <= 200
num1 and num2 consist of digits only.
Both num1 and num2 do not contain any leading zero, except the number 0 itself.

T: o(m*n), S: o(m+n)

string multiply(string & a, string & b) {
    string res(a.size() + b.size(), '0');
    int carry = 0;
    for (int i = a.size() - 1; i >= 0; i--) {
        carry = 0;
        for (int j = b.size() - 1; j >= 0; j--) {
            int sum = (res[i + j + 1] - '0') + (a[i] - '0') * (b[j] - '0') + carry;
            carry = sum / 10;
            res[i + j + 1] = (sum % 10) + '0';
        }
        res[i] += carry;
    }
    
    for (int i = 0; i < res.size(); i++) {
        if (res[i] != '0') {
            return res.substr(i);
        }
    }
    
    return "0";
}
