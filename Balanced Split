Given an array of integers (which may include repeated integers), determine if there's a way to split the array into two subsequences A and B such that the sum of the integers in both arrays is the same, and all of the integers in A are strictly smaller than all of the integers in B.
Note: Strictly smaller denotes that every integer in A must be less than, and not equal to, every integer in B.

Example 1
arr = [1, 5, 7, 1]
output = true
We can split the array into A = [1, 1, 5] and B = [7].
Example 2
arr = [12, 7, 6, 7, 6]
output = false
We can't split the array into A = [6, 6, 7] and B = [7, 12] since this doesn't satisfy the requirement that all integers in A are smaller than all integers in B.

T: o(nlogn), S:o(1)
bool balancedSplitExists(vector<int>& arr){
  // Write your code here
  sort(arr.begin(), arr.end());
  int leftsum = 0;
  int rightsum = 0;
  for (int i = 0; i < arr.size(); i++) {
    leftsum += arr[i];
  }
  
  for (int i = arr.size() - 1; i > 0; i--) {
    rightsum += arr[i];
    leftsum -= arr[i];
    if (leftsum == rightsum) {
      // left subarray should have all elements lesser than right subarray
      if (arr[i-1] < arr[i]) {
        return true;
      }
    }
    
  }

  return false;
  
}
