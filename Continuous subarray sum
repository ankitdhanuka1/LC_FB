Given an integer array, find a continuous subarray where the sum of numbers is the biggest. Your code should return the index of the first number and the index of the last number. (If their are duplicate answer, return the minimum one in lexicographical order)

Example
Example 1:

Input: [-3, 1, 3, -3, 4]
Output: [1, 4]

T: o(n), S:o(1)
//Kadane's algorithm

vector<int> continuousSubarraySum(vector<int> &A) {
        // write your code here
        int j = A[0];
        int max = A[0];
        int start = 0;
        int end = 0;
        vector <int> res(2,0);

        for (int i = 1; i < A.size(); i++) {
            int sum = j + A[i];  //sum till the index i
            if (A[i] > sum) {  //if A[i] is greater then sum till now, then no need to consider subarray before index i
                j = A[i];
                start = i;     // begin a new subarray with start as i
            } else {
                j = sum;       // else add sum to sumtillnow
            }

            if (j > max) {    // if sumtill now is greater than maxsubarraysum
                max = j;      // than maxsubarraysum = sumtillnow
                end = i;      // end the max subarray at this index, as it has the max sum.
                res[0] = start; //store result in the res vector
                res[1] = end;
            }
        }

        return res;
    }
