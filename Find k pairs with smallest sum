You are given two integer arrays nums1 and nums2 sorted in ascending order and an integer k.

Define a pair (u, v) which consists of one element from the first array and one element from the second array.

Return the k pairs (u1, v1), (u2, v2), ..., (uk, vk) with the smallest sums.

 

Example 1:

Input: nums1 = [1,7,11], nums2 = [2,4,6], k = 3
Output: [[1,2],[1,4],[1,6]]
Explanation: The first 3 pairs are returned from the sequence: [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]
Example 2:

Input: nums1 = [1,1,2], nums2 = [1,2,3], k = 2
Output: [[1,1],[1,1]]
Explanation: The first 2 pairs are returned from the sequence: [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]


T:o(klog(k)), S:o(k)

 vector<vector<int>> kSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k) {
        vector<vector<int>> res;
        set<pair<int, int>> set;
        // take a priority q which is min heap of pair of sum and pair of indexes of both array. Comparision is done on basis of sum
        priority_queue<pair<int, pair<int, int>>, vector<pair<int, pair<int, int>>>, greater<pair<int, pair<int, int>>>> q;
        
        int sum = nums1[0] + nums2[0];
        q.push({sum, {0,0}});
        set.insert({0,0});
        
        while((k > 0) && (q.size() != 0)) {
            pair<int, int> temp = q.top().second;
            q.pop();
            res.push_back({nums1[temp.first], nums2[temp.second]});
            
            if ((temp.first + 1 < nums1.size()) && (set.find({temp.first + 1, temp.second}) == set.end() )) {
                int sum = nums1[temp.first + 1] + nums2[temp.second];
                q.push({sum, {temp.first + 1, temp.second}});
                set.insert({temp.first + 1, temp.second});
            }
            
            if ((temp.second + 1 < nums2.size()) && (set.find({temp.first, temp.second + 1}) == set.end() )) {
                int sum = nums1[temp.first] + nums2[temp.second + 1];
                q.push({sum,{temp.first, temp.second + 1}});
                set.insert({temp.first, temp.second + 1});
            }
            
            k--;
            
        }
        
        
        return res;
    }
