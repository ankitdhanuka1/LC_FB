Given a string, your task is to count how many palindromic substrings in this string.
The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.

Input: "abc"
Output: 3
Explanation:
3 palindromic strings: "a", "b", "c".
Example2

Input: "aba"
Output: 4
Explanation:
4 palindromic strings: "a", "b", "a", "aba".


T: o(N2), S:o(1)

 int count = 0;
public:
    int solve(string &str, int pos, int even) {
        int left;
        int right;
        int cnt = 0;

        if (even) { //right pointer starts one index afert left in even palindromes.
            left = pos;
            right = pos + 1;
        } else { // left and right pointer start at same index in odd palindromes.
            left = pos;
            right = pos;
        }

        while ((left >= 0) && (right < str.size())) {
            if (str[left] != str[right]) {
                break;
            }

            cnt++;
            left--;
            right++;
        }
        
        return cnt;
    }

    /**
     * @param str: s string
     * @return: return an integer, denote the number of the palindromic substrings
     */
    int countPalindromicSubstrings(string &str) {
        // write your code here
        for (int i = 0; i < str.size(); i++) {
            count += solve(str, i, 0); //even palidrome check
            count += solve(str, i, 1); //odd palindrome check
        }

        return count;
    }
