Given the root of a binary tree, return the length of the diameter of the tree.

The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.

The length of a path between two nodes is represented by the number of edges between them.

 

Example 1:


Input: root = [1,2,3,4,5]
Output: 3
Explanation: 3is the length of the path [4,2,1,3] or [5,2,1,3].

T: o(N), S:o(N)


 struct TreeInfo {
        int diameter;
        int height;
    };
public:
    int diameterOfBinaryTree(TreeNode* root) {
        TreeInfo res = solve(root);
        return res.diameter;
    }
    
    TreeInfo solve(TreeNode *root) {
        TreeInfo temp = {0,0};
        if (root == NULL) {
            return temp;
        }
        
        TreeInfo left_temp = solve(root->left);
        TreeInfo right_temp = solve(root->right);
        
        //FInd Max height and max Diameter so far, max of two will give the current diameter. Current height can be found by 1 + maximum of left and right subtree height.
        int maxHeightSoFar = left_temp.height + right_temp.height;
        int maxDiameterSoFar = max(left_temp.diameter, right_temp.diameter);
        temp.diameter = max(maxHeightSoFar, maxDiameterSoFar);
        temp.height = 1 + max(left_temp.height, right_temp.height);
        //cout <<root->val<<" "<<maxHeightSoFar<<" "<<maxDiameterSoFar<<" "<<temp.diameter<<" "<<temp.height<<endl;
        return temp;
    }
