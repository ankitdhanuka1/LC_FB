You are given two lists of closed intervals, firstList and secondList, where firstList[i] = [starti, endi] and secondList[j] = [startj, endj]. Each list of intervals is pairwise disjoint and in sorted order.

Return the intersection of these two interval lists.

A closed interval [a, b] (with a < b) denotes the set of real numbers x with a <= x <= b.

The intersection of two closed intervals is a set of real numbers that are either empty or represented as a closed interval. For example, the intersection of [1, 3] and [2, 4] is [2, 3].


Input: firstList = [[0,2],[5,10],[13,23],[24,25]], secondList = [[1,5],[8,12],[15,24],[25,26]]
Output: [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]

T: o(N + M), S: o(N + M)

 vector<vector<int>> intervalIntersection(vector<vector<int>>& firstList, vector<vector<int>>& secondList) {
        int i = 0;
        int j = 0;
        vector<vector<int>> res;
        while ((i < firstList.size()) && (j < secondList.size())) {
            //Find the intersection interval between interval at ith and jth index.
            int istart = max(firstList[i][0], secondList[j][0]);
            int iend = min(firstList[i][1], secondList[j][1]);
            
            //put the intersection interval in res
            if (istart <= iend)
                res.push_back({istart, iend});
            
            //find smallest endpoint of both intervals, and remove that interval
            if (firstList[i][1] <= secondList[j][1]) {
                i++;
            } else {
                j++;
            }
        }
        
        return res;
    }

