You are given an array arr of N integers. For each index i, you are required to determine the number of contiguous subarrays that fulfill the following conditions:
The value at index i must be the maximum element in the contiguous subarrays, and
These contiguous subarrays must either start from or end on index i.

Example:
arr = [3, 4, 1, 6, 2]
output = [1, 3, 1, 5, 1]
Explanation:
For index 0 - [3] is the only contiguous subarray that starts (or ends) with 3, and the maximum value in this subarray is 3.
For index 1 - [4], [3, 4], [4, 1]
For index 2 - [1]
For index 3 - [6], [6, 2], [1, 6], [4, 1, 6], [3, 4, 1, 6]
For index 4 - [2]
So, the answer for the above input is [1, 3, 1, 5, 1]

vector <int> CountSubarrays(vector <int> arr) {
  // Write your code here
  vector<int> res(arr.size(), 0);
  stack<int> st;
  res[0] = 1;
  st.push(0);
  
  for (int i = 1; i < arr.size(); i++) {
    while (!st.empty() && (arr[st.top()] < arr[i])) {
      st.pop();
    }
    
    if (st.size() == 0) {
      res[i] = i+1;
    } else {
      res[i] = i - st.top();
    }
    
    //cout<<i <<" "<<res[i]<<endl;
    st.push(i);
  }
  
  stack<int> rst;
  rst.push(arr.size() - 1);
  
  for (int i = arr.size() - 2; i >= 0; i--) {
    while (!rst.empty() && (arr[rst.top()] < arr[i])) {
      rst.pop();
    }
    
    if (rst.size() == 0) {
      res[i] += (arr.size() - 1 - i);
    } else {
      res[i] += rst.top() - i - 1;
    }
    
    rst.push(i);
  }
  
  return res;
 
}
